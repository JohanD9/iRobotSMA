import ihm.Couleur
import ihm.Position
import ihm.Type
import interfaces.IActionRobot
import interfaces.IControl
import interfaces.ICreationEcosystem
import interfaces.IDecisionRobot
import interfaces.IInfos
import interfaces.IPerceptionRobot
import interfaces.IRobot

namespace iRobotSMA {
	
	component Perception {
		requires infosFromRobot: IInfos
		provides perceptionRobotToDecision: IPerceptionRobot
	}

	component Decision {
		requires perceptionRobotFromPerception: IPerceptionRobot
		provides decisionRobotToAction: IDecisionRobot
	}

	component Action {
		requires decisionRobotFromDecision: IDecisionRobot
		provides actionRobotToRobot: IActionRobot
	}

	component Ihm {
		provides infosFromIhm: IInfos
		provides controlToEnv : IControl
		requires creationEcosystemFromEcoProxyAndRobot : ICreationEcosystem
	}

	ecosystem EcoRobot {
		provides robotToEcoProxyAndRobot : IRobot
		species Robot(id: Integer, pos: Position, type: Type, color: Couleur) {
			provides actionRobotToEcoRobot: IActionRobot
			requires infosFromProxy: IInfos

			part perception: Perception {
				bind infosFromRobot to infosFromProxy
			}
			part decision: Decision {
				bind perceptionRobotFromPerception to perception.perceptionRobotToDecision
			}
			part action: Action {
				bind decisionRobotFromDecision to decision.decisionRobotToAction
			}
		}
	}

	ecosystem EcoProxy {
		requires infosFromEcoProxyAndRobot : IInfos

		species Proxy(id: Integer) {
			provides infosToRobot: IInfos
		}
	}

	ecosystem EcoProxyAndRobot {
		provides creationEcosystemToIhm : ICreationEcosystem
		requires infosFromIhm: IInfos
		
		part proxys : EcoProxy {
			bind infosFromEcoProxyAndRobot to infosFromIhm
		}
		part robots : EcoRobot
		
		species ProxyAndRobot(id: Integer, pos:Position, type: Type, color: Couleur) {
			use proxy : proxys.Proxy(id)
			use robot : robots.Robot(id, pos, type, color) {
				bind infosFromProxy to proxy.infosToRobot
			}
		}
	}
	
	component Env {
		part ihm : Ihm {
			bind creationEcosystemFromEcoProxyAndRobot to ecoProxyAndRobot.creationEcosystemToIhm
		}
		part ecoProxyAndRobot : EcoProxyAndRobot {
			bind infosFromIhm to ihm.infosFromIhm
		}
	}
}